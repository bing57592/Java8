package com.ysu.scala.unit4

/**
  * 函数的注意事项和细节讨论:
  *  1. 函数的形参列表可以是多个, 如果函数没有形参, 调用时可以不带()
  *  2. 形参列表和返回值列表的数据类型可以是值类型和引用类型
  *  3. Scala中的函数可以根据函数体最后一行代码自行推断函数的返回值类型. 那么这种情况下, return可以省略
  *  4. 因为Scala可以自动推断. 所以省略return关键字的场合, 返回值类型也可以省略.
  *  5. 如果函数明确使用return关键字, 那么函数的返回就不能自行推断了, 这是要明确携程 :返回值类型 = ,
  * ----当然如果什么都不写, 即使有return, 返回值为()
  *  6. 如果函数明确声明无返回值(声明Unit_, 那么函数体中即使使用return关键字, 也不会有返回值.
  *  7. 如果明确函数无返回值或者不确定返回值类型, 那么返回值类型可以省略(或声明为Any)
  *  8. Scala语法中任何的语法结构都可以嵌套其他语法结构, 即: 函数中可以再声明/定义函数, 类中可以再声明
  * ----定义类, 方法中可以再声明/定义方法. ==> 这就是, 将函数看做对象/对象的属性.
  *  9. Scala函数的形参, 在声明参数是, 直接赋初始值(默认值). 这时调用函数时, 如果没有指定实参, 则会
  * ----使用默认值. 如果制定了实参, 则实参会覆盖默认值.
  * 10. 如果函数存在多个参数, 每一个参数都可以指定默认值, 那么这个时候, 传递的参数到底是覆盖默认值,
  * ----还是赋值给没有默认值的参数, 就不确定了(默认按照声明顺序(从左到右)). 在这种情况, 可以采用 "带
  * ----名参数".
  * 11. scala函数的形参默认是val的, 因此不能在函数中进行修改.
  *
  * @Author bing57592
  * @Date 2018-12-06 00:59
  */
object FunctionOperation {
  def main(args: Array[String]): Unit = {

  }

  def defaultParam(n: Int, v: String = "hello"): Unit = {

  }

  def updMoster(n: Int, monster: Monster) = {
    println("n = " + n)
    monster.name = "孙悟空" + n
    monster
  }
}

class Monster {
  var name = "牛魔王"
  var age = 12345


  override def toString = s"Monster($name, $age)"
}